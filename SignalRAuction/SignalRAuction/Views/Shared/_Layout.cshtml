<!DOCTYPE html>
<html>
<head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width" />
    <title>@ViewBag.Title</title>

    <meta http-equiv="X-UA-Compatible" content="IE=edge" />
    @*<link href="~/Content/Css/Reset.css" rel="stylesheet" />*@
    <link href="~/Content/Css/Style.css" rel="stylesheet" />
    <link href="~/Content/Css/ui-lightness/jquery-ui-1.10.0.custom.min.css" rel="stylesheet" />
    <link href='http://fonts.googleapis.com/css?family=Yanone+Kaffeesatz:700' rel='stylesheet' type='text/css'>
    <script src="~/Scripts/jquery-1.6.4.min.js"></script>
    <script src="~/Scripts/jquery-ui-1.10.0.min.js"></script>
    <script type="text/javascript" src="~/Scripts/jquery.signalR-1.0.0-rc2.min.js"></script>
    <!--Reference the autogenerated SignalR hub script. -->
    <script src="~/signalr/hubs"></script>

    <script type="text/javascript">

        // Store interval function
        var intervalTimeRemaining,
            endTime;


        function getRemainingTime() {

            now = new Date();
            kickoff = endTime;// Date.parse("June 11, 2010 11:30:00");
            diff = kickoff - now;

            month = Math.floor(diff / (1000 * 60 * 60 * 24 * 30));
            days = Math.floor(diff / (1000 * 60 * 60 * 24));
            hours = Math.floor(diff / (1000 * 60 * 60));
            mins = Math.floor(diff / (1000 * 60));
            secs = Math.floor(diff / 1000);

            //MM = month;
            //dd = days -  month * 30;
            dd = days;
            hh = hours - days * 24;
            mm = mins - hours * 60;
            ss = secs - mins * 60;

            return formatHHMMSS(hh, mm, ss);
        }

        $(function () {
            // Get the proxy
            var auctionHub = $.connection.auctionHub;


            // Declare a function on the chat hub so the server can invoke it
            auctionHub.client.auctionRefresh = function (model) {

                $('#prod-value-bid').val(model.ValueNextBid);
                $('#total-bids span').text(model.BidsTotal);
                //$('#value-time').text(model.TimeRemaining.toString().toHHMMSS());

                endTime = new Date(model.EndTimeFullText);

                $('#value-time').text(getRemainingTime());

                initializeDecrementTimeRemaining();
            };

            auctionHub.client.notifyNewBid = function (notification) {
                $('#recent-bids ul').prepend('<li>' + notification + '</li>');
            };

            auctionHub.client.addMessage = function (message) {
                $('#message').append('<p>' + message + '</p>');
            };

            $("#prod-btn-bid").click(function () {
                if (!validBid()) {
                    showMessageNotification('Who are you?');
                    return;
                }

                auctionHub.server
                    .placeBid($('#prod-value-bid').val(), $('#user input:text').val())
                    .done(function () {
                        showMessageNotification('Done');
                    });
            });

            // Start connection
            $.connection.hub.start().done(function () {
                auctionHub.server.callRefresh();
            });

            $("#dialog-message").dialog({
                modal: true,
                autoOpen: false,
            });
        });

        function showMessageNotification(message) {
            $('#dialog-message p em').text(message);
            $("#dialog-message").dialog("open");
        }

        function validBid() {
            var value = $('#prod-value-bid').val(),
                user = $('#user input:text').val();

            return value != '' && user != '';
        }

        function initializeDecrementTimeRemaining() {
            // Clear interval if already exists
            clearInterval(intervalTimeRemaining);

            // Set interval function
            intervalTimeRemaining = setInterval(decrementTimeRemaining, 1000);
        }

        function decrementTimeRemaining() {

            var timeRemaining = decrementTimePerSeconds($('#value-time').text());

            $('#value-time').text(timeRemaining);

            if (isTimeCompleted(timeRemaining)) {
                clearInterval(intervalTimeRemaining);
            }
        }

        function getTypeTime(secs) {
            if (secs > 86400) {
                return 'days';
            } else if (secs > 3600) {
                return 'hours';
            } else if (secs > 60) {
                return 'mins';
            } else {
                return 'secs';
            }
        }

        String.prototype.toHHMMSS = function () {
            sec_numb = parseInt(this);
            var hours = Math.floor(sec_numb / 3600);
            var minutes = Math.floor((sec_numb - (hours * 3600)) / 60);
            var seconds = sec_numb - (hours * 3600) - (minutes * 60);

            return formatHHMMSS(hours, minutes, seconds);
        }

        function decrementTimePerSeconds(textTime) {

            var time = textTime.split(':');

            var hours = parseInt(time[0]),
                minutes = parseInt(time[1]),
                seconds = parseInt(time[2]);

            if (seconds == 0) {
                seconds = 59;

                if (minutes == 0) {
                    minutes = 59;

                    if (hours > 0) {
                        hours -= 1;
                    }
                } else {
                    minutes -= 1;
                }

            } else {
                seconds -= 1;
            }

            return formatHHMMSS(hours, minutes, seconds);
        }

        function formatHHMMSS(hours, minutes, seconds) {
            if (hours < 10) { hours = "0" + hours; }
            if (minutes < 10) { minutes = "0" + minutes; }
            if (seconds < 10) { seconds = "0" + seconds; }

            return hours + ':' + minutes + ':' + seconds;
        }

        function isTimeCompleted(textTime) {
            var time = textTime.split(':');

            var hours = parseInt(time[0]),
                minutes = parseInt(time[1]),
                seconds = parseInt(time[2]);

            return (hours == 0 && minutes == 0 && seconds == 0);
        }
    </script>


    @*@Styles.Render("~/Content/css")
    @Scripts.Render("~/bundles/modernizr")*@
</head>
<body>
    @RenderSection("Top", required: false)

    <div id="wrapper">
        <h2 id="title-bid">@ViewBag.Title</h2>
        <div id="auction-wrapper">
            @RenderBody()
        </div>

        @RenderSection("Bottom", required: false)
    </div>

    <div id="dialog-message" title="Notification">
        <p>
            <span class="ui-icon ui-icon-circle-check"></span>
            <em>
                <!-- message -->
            </em>
        </p>
    </div>

    @*@Scripts.Render("~/bundles/jquery")
    @RenderSection("scripts", required: false)*@
</body>
</html>
